---- usb_transfer Matches (434 in 13 files) ----
Core.c (x:\usb\libusb-1.0.19\libusb): * - The \ref libusb_transfer_flags::LIBUSB_TRANSFER_ADD_ZERO_PACKET
Core.c (x:\usb\libusb-1.0.19\libusb): * "LIBUSB_TRANSFER_ADD_ZERO_PACKET" flag is currently only supported on Linux.
Core.c (x:\usb\libusb-1.0.19\libusb):	enum libusb_transfer_type ep_type;
Core.c (x:\usb\libusb-1.0.19\libusb):	ep_type = (enum libusb_transfer_type) (ep->bmAttributes & 0x3);
Core.c (x:\usb\libusb-1.0.19\libusb):	if (ep_type == LIBUSB_TRANSFER_TYPE_ISOCHRONOUS
Core.c (x:\usb\libusb-1.0.19\libusb):			|| ep_type == LIBUSB_TRANSFER_TYPE_INTERRUPT)
Core.c (x:\usb\libusb-1.0.19\libusb):		struct libusb_transfer *transfer =
Core.c (x:\usb\libusb-1.0.19\libusb):			USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Core.c (x:\usb\libusb-1.0.19\libusb): * \param error_code The \ref libusb_error or libusb_transfer_status code to
Core.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_ERROR:
Core.c (x:\usb\libusb-1.0.19\libusb):		return "LIBUSB_TRANSFER_ERROR";
Core.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_TIMED_OUT:
Core.c (x:\usb\libusb-1.0.19\libusb):		return "LIBUSB_TRANSFER_TIMED_OUT";
Core.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_CANCELLED:
Core.c (x:\usb\libusb-1.0.19\libusb):		return "LIBUSB_TRANSFER_CANCELLED";
Core.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_STALL:
Core.c (x:\usb\libusb-1.0.19\libusb):		return "LIBUSB_TRANSFER_STALL";
Core.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_NO_DEVICE:
Core.c (x:\usb\libusb-1.0.19\libusb):		return "LIBUSB_TRANSFER_NO_DEVICE";
Core.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_OVERFLOW:
Core.c (x:\usb\libusb-1.0.19\libusb):		return "LIBUSB_TRANSFER_OVERFLOW";
Core.c (x:\usb\libusb-1.0.19\libusb):		return "LIBUSB_SUCCESS / LIBUSB_TRANSFER_COMPLETED";
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):    transfer->flags &= ~LIBUSB_TRANSFER_ADD_ZERO_PACKET;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_CONTROL:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_BULK:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  if (LIBUSB_TRANSFER_TYPE_BULK_STREAM == transfer->type)
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_CONTROL:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_BULK:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  if (transfer->type == LIBUSB_TRANSFER_TYPE_ISOCHRONOUS && tpriv->isoc_framelist) {
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  if (kIOReturnSuccess == result && IS_XFEROUT(transfer) && transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET) {
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):    return LIBUSB_TRANSFER_COMPLETED;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):    return LIBUSB_TRANSFER_CANCELLED;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):    return LIBUSB_TRANSFER_STALL;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):    return LIBUSB_TRANSFER_OVERFLOW;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):    return LIBUSB_TRANSFER_TIMED_OUT;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):    return LIBUSB_TRANSFER_ERROR;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  int isIsoc      = LIBUSB_TRANSFER_TYPE_ISOCHRONOUS == transfer->type;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  int isBulk      = LIBUSB_TRANSFER_TYPE_BULK == transfer->type;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  int isControl   = LIBUSB_TRANSFER_TYPE_CONTROL == transfer->type;
Darwin_usb.c (x:\usb\libusb-1.0.19\libusb\os):  int isInterrupt = LIBUSB_TRANSFER_TYPE_INTERRUPT == transfer->type;
Io.c (x:\usb\libusb-1.0.19\libusb): * the \ref libusb_transfer::actual_length "libusb_transfer.actual_length"
Io.c (x:\usb\libusb-1.0.19\libusb): * the buffer. libusb reports LIBUSB_TRANSFER_OVERFLOW for this condition but
Io.c (x:\usb\libusb-1.0.19\libusb): * This is represented by the public libusb_transfer structure type.
Io.c (x:\usb\libusb-1.0.19\libusb): * -# <b>Allocation</b>: allocate a libusb_transfer
Io.c (x:\usb\libusb-1.0.19\libusb): * -# <b>Filling</b>: populate the libusb_transfer instance with information
Io.c (x:\usb\libusb-1.0.19\libusb): *    libusb_transfer structure
Io.c (x:\usb\libusb-1.0.19\libusb): * The user-specified callback is passed a pointer to the libusb_transfer
Io.c (x:\usb\libusb-1.0.19\libusb): * the libusb_transfer structure documentation for more information.
Io.c (x:\usb\libusb-1.0.19\libusb): * The <tt>libusb_transfer</tt> structure is generic and hence does not
Io.c (x:\usb\libusb-1.0.19\libusb): * the length field of the libusb_transfer object must be the length of
Io.c (x:\usb\libusb-1.0.19\libusb): * may have a LIBUSB_TRANSFER_STALL status code. This indicates the control
Io.c (x:\usb\libusb-1.0.19\libusb): * During filling, set \ref libusb_transfer::type "type" to
Io.c (x:\usb\libusb-1.0.19\libusb): * \ref libusb_transfer_type::LIBUSB_TRANSFER_TYPE_ISOCHRONOUS
Io.c (x:\usb\libusb-1.0.19\libusb): * "LIBUSB_TRANSFER_TYPE_ISOCHRONOUS", and set
Io.c (x:\usb\libusb-1.0.19\libusb): * \ref libusb_transfer::num_iso_packets "num_iso_packets" to a value less than
Io.c (x:\usb\libusb-1.0.19\libusb): * the \ref libusb_transfer::iso_packet_desc "iso_packet_desc" array. Section
Io.c (x:\usb\libusb-1.0.19\libusb): * \ref libusb_transfer::actual_length "actual_length" field of the transfer
Io.c (x:\usb\libusb-1.0.19\libusb): * The \ref libusb_transfer::status "status" field of the transfer is also a
Io.c (x:\usb\libusb-1.0.19\libusb): *    \ref libusb_transfer_status::LIBUSB_TRANSFER_COMPLETED
Io.c (x:\usb\libusb-1.0.19\libusb): *    "LIBUSB_TRANSFER_COMPLETED". Note that bus errors and software-incurred
Io.c (x:\usb\libusb-1.0.19\libusb): *    \ref libusb_transfer_status::LIBUSB_TRANSFER_ERROR
Io.c (x:\usb\libusb-1.0.19\libusb): *    "LIBUSB_TRANSFER_ERROR" only when serious errors were encountered.
Io.c (x:\usb\libusb-1.0.19\libusb): * - \ref libusb_transfer_flags::LIBUSB_TRANSFER_SHORT_NOT_OK
Io.c (x:\usb\libusb-1.0.19\libusb): *   "LIBUSB_TRANSFER_SHORT_NOT_OK" results in transfers which transferred
Io.c (x:\usb\libusb-1.0.19\libusb): *   \ref libusb_transfer_status::LIBUSB_TRANSFER_ERROR "LIBUSB_TRANSFER_ERROR"
Io.c (x:\usb\libusb-1.0.19\libusb): * - \ref libusb_transfer_flags::LIBUSB_TRANSFER_FREE_BUFFER
Io.c (x:\usb\libusb-1.0.19\libusb): *   "LIBUSB_TRANSFER_FREE_BUFFER" allows you to ask libusb to free the transfer
Io.c (x:\usb\libusb-1.0.19\libusb): * - \ref libusb_transfer_flags::LIBUSB_TRANSFER_FREE_TRANSFER
Io.c (x:\usb\libusb-1.0.19\libusb): *   "LIBUSB_TRANSFER_FREE_TRANSFER" causes libusb to automatically free the
Io.c (x:\usb\libusb-1.0.19\libusb):void cb(struct libusb_transfer *transfer)
Io.c (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer;
Io.c (x:\usb\libusb-1.0.19\libusb):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(transfer)->timeout;
Io.c (x:\usb\libusb-1.0.19\libusb):			USBI_TRANSFER_TO_LIBUSB_TRANSFER(transfer)->timeout);
Io.c (x:\usb\libusb-1.0.19\libusb): * \ref libusb_transfer::num_iso_packets "num_iso_packets" and
Io.c (x:\usb\libusb-1.0.19\libusb): * \ref libusb_transfer::type "type" fields accordingly.
Io.c (x:\usb\libusb-1.0.19\libusb):struct libusb_transfer * LIBUSB_CALL libusb_alloc_transfer(
Io.c (x:\usb\libusb-1.0.19\libusb):		+ sizeof(struct libusb_transfer)
Io.c (x:\usb\libusb-1.0.19\libusb):	return USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Io.c (x:\usb\libusb-1.0.19\libusb): * If the \ref libusb_transfer_flags::LIBUSB_TRANSFER_FREE_BUFFER
Io.c (x:\usb\libusb-1.0.19\libusb): * "LIBUSB_TRANSFER_FREE_BUFFER" flag is set and the transfer buffer is
Io.c (x:\usb\libusb-1.0.19\libusb):void API_EXPORTED libusb_free_transfer(struct libusb_transfer *transfer)
Io.c (x:\usb\libusb-1.0.19\libusb):	if (transfer->flags & LIBUSB_TRANSFER_FREE_BUFFER && transfer->buffer)
Io.c (x:\usb\libusb-1.0.19\libusb):	itransfer = LIBUSB_TRANSFER_TO_USBI_TRANSFER(transfer);
Io.c (x:\usb\libusb-1.0.19\libusb):			usbi_dbg("next timeout originally %dms", USBI_TRANSFER_TO_LIBUSB_TRANSFER(transfer)->timeout);
Io.c (x:\usb\libusb-1.0.19\libusb):int API_EXPORTED libusb_submit_transfer(struct libusb_transfer *transfer)
Io.c (x:\usb\libusb-1.0.19\libusb):		LIBUSB_TRANSFER_TO_USBI_TRANSFER(transfer);
Io.c (x:\usb\libusb-1.0.19\libusb): * \ref libusb_transfer_status::LIBUSB_TRANSFER_CANCELLED
Io.c (x:\usb\libusb-1.0.19\libusb): * "LIBUSB_TRANSFER_CANCELLED."
Io.c (x:\usb\libusb-1.0.19\libusb):int API_EXPORTED libusb_cancel_transfer(struct libusb_transfer *transfer)
Io.c (x:\usb\libusb-1.0.19\libusb):		LIBUSB_TRANSFER_TO_USBI_TRANSFER(transfer);
Io.c (x:\usb\libusb-1.0.19\libusb):void API_EXPORTED libusb_transfer_set_stream_id(
Io.c (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer, uint32_t stream_id)
Io.c (x:\usb\libusb-1.0.19\libusb):		LIBUSB_TRANSFER_TO_USBI_TRANSFER(transfer);
Io.c (x:\usb\libusb-1.0.19\libusb):uint32_t API_EXPORTED libusb_transfer_get_stream_id(
Io.c (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer)
Io.c (x:\usb\libusb-1.0.19\libusb):		LIBUSB_TRANSFER_TO_USBI_TRANSFER(transfer);
Io.c (x:\usb\libusb-1.0.19\libusb):	enum libusb_transfer_status status)
Io.c (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer =
Io.c (x:\usb\libusb-1.0.19\libusb):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Io.c (x:\usb\libusb-1.0.19\libusb):	if (status == LIBUSB_TRANSFER_COMPLETED
Io.c (x:\usb\libusb-1.0.19\libusb):			&& transfer->flags & LIBUSB_TRANSFER_SHORT_NOT_OK) {
Io.c (x:\usb\libusb-1.0.19\libusb):		if (transfer->type == LIBUSB_TRANSFER_TYPE_CONTROL)
Io.c (x:\usb\libusb-1.0.19\libusb):			status = LIBUSB_TRANSFER_ERROR;
Io.c (x:\usb\libusb-1.0.19\libusb):	if (flags & LIBUSB_TRANSFER_FREE_TRANSFER)
Io.c (x:\usb\libusb-1.0.19\libusb):		return usbi_handle_transfer_completion(transfer, LIBUSB_TRANSFER_TIMED_OUT);
Io.c (x:\usb\libusb-1.0.19\libusb):	return usbi_handle_transfer_completion(transfer, LIBUSB_TRANSFER_CANCELLED);
Io.c (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer =
Io.c (x:\usb\libusb-1.0.19\libusb):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Io.c (x:\usb\libusb-1.0.19\libusb):	/* terminate all pending transfers with the LIBUSB_TRANSFER_NO_DEVICE
Io.c (x:\usb\libusb-1.0.19\libusb):			if (USBI_TRANSFER_TO_LIBUSB_TRANSFER(cur)->dev_handle == handle) {
Io.c (x:\usb\libusb-1.0.19\libusb):			 USBI_TRANSFER_TO_LIBUSB_TRANSFER(to_cancel));
Io.c (x:\usb\libusb-1.0.19\libusb):		usbi_handle_transfer_completion(to_cancel, LIBUSB_TRANSFER_NO_DEVICE);
Libusb-1.0.def (x:\usb\libusb-1.0.19\libusb):  libusb_transfer_get_stream_id
Libusb-1.0.def (x:\usb\libusb-1.0.19\libusb):  libusb_transfer_get_stream_id@4 = libusb_transfer_get_stream_id
Libusb-1.0.def (x:\usb\libusb-1.0.19\libusb):  libusb_transfer_set_stream_id
Libusb-1.0.def (x:\usb\libusb-1.0.19\libusb):  libusb_transfer_set_stream_id@8 = libusb_transfer_set_stream_id
Libusb.h (x:\usb\libusb-1.0.19\libusb):#define LIBUSB_TRANSFER_TYPE_MASK			0x03    /* in bmAttributes */
Libusb.h (x:\usb\libusb-1.0.19\libusb):enum libusb_transfer_type {
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_TYPE_CONTROL = 0,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_TYPE_ISOCHRONOUS = 1,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_TYPE_BULK = 2,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_TYPE_INTERRUPT = 3,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_TYPE_BULK_STREAM = 4,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	 * correspond to \ref libusb_transfer_type. Bits 2:3 are only used for
Libusb.h (x:\usb\libusb-1.0.19\libusb):enum libusb_transfer_status {
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_COMPLETED,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_ERROR,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_TIMED_OUT,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_CANCELLED,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_STALL,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_NO_DEVICE,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_OVERFLOW,
Libusb.h (x:\usb\libusb-1.0.19\libusb): * libusb_transfer.flags values */
Libusb.h (x:\usb\libusb-1.0.19\libusb):enum libusb_transfer_flags {
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_SHORT_NOT_OK = 1<<0,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_FREE_BUFFER = 1<<1,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_FREE_TRANSFER = 1<<2,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	LIBUSB_TRANSFER_ADD_ZERO_PACKET = 1 << 3,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	enum libusb_transfer_status status;
Libusb.h (x:\usb\libusb-1.0.19\libusb):struct libusb_transfer;
Libusb.h (x:\usb\libusb-1.0.19\libusb): * \ref libusb_transfer::callback "callback" member of the libusb_transfer
Libusb.h (x:\usb\libusb-1.0.19\libusb): * \param transfer The libusb_transfer struct the callback function is being
Libusb.h (x:\usb\libusb-1.0.19\libusb):typedef void (LIBUSB_CALL *libusb_transfer_cb_fn)(struct libusb_transfer *transfer);
Libusb.h (x:\usb\libusb-1.0.19\libusb):struct libusb_transfer {
Libusb.h (x:\usb\libusb-1.0.19\libusb):	/** A bitwise OR combination of \ref libusb_transfer_flags. */
Libusb.h (x:\usb\libusb-1.0.19\libusb):	/** Type of the endpoint from \ref libusb_transfer_type */
Libusb.h (x:\usb\libusb-1.0.19\libusb):	enum libusb_transfer_status status;
Libusb.h (x:\usb\libusb-1.0.19\libusb):	libusb_transfer_cb_fn callback;
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer)
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer)
Libusb.h (x:\usb\libusb-1.0.19\libusb):struct libusb_transfer * LIBUSB_CALL libusb_alloc_transfer(int iso_packets);
Libusb.h (x:\usb\libusb-1.0.19\libusb):int LIBUSB_CALL libusb_submit_transfer(struct libusb_transfer *transfer);
Libusb.h (x:\usb\libusb-1.0.19\libusb):int LIBUSB_CALL libusb_cancel_transfer(struct libusb_transfer *transfer);
Libusb.h (x:\usb\libusb-1.0.19\libusb):void LIBUSB_CALL libusb_free_transfer(struct libusb_transfer *transfer);
Libusb.h (x:\usb\libusb-1.0.19\libusb):void LIBUSB_CALL libusb_transfer_set_stream_id(
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer, uint32_t stream_id);
Libusb.h (x:\usb\libusb-1.0.19\libusb):uint32_t LIBUSB_CALL libusb_transfer_get_stream_id(
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer);
Libusb.h (x:\usb\libusb-1.0.19\libusb): * Helper function to populate the required \ref libusb_transfer fields
Libusb.h (x:\usb\libusb-1.0.19\libusb): * used to automatically populate the \ref libusb_transfer::length "length"
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer, libusb_device_handle *dev_handle,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	unsigned char *buffer, libusb_transfer_cb_fn callback, void *user_data,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	transfer->type = LIBUSB_TRANSFER_TYPE_CONTROL;
Libusb.h (x:\usb\libusb-1.0.19\libusb): * Helper function to populate the required \ref libusb_transfer fields
Libusb.h (x:\usb\libusb-1.0.19\libusb):static inline void libusb_fill_bulk_transfer(struct libusb_transfer *transfer,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	unsigned char *buffer, int length, libusb_transfer_cb_fn callback,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	transfer->type = LIBUSB_TRANSFER_TYPE_BULK;
Libusb.h (x:\usb\libusb-1.0.19\libusb): * Helper function to populate the required \ref libusb_transfer fields
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer, libusb_device_handle *dev_handle,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	unsigned char *buffer, int length, libusb_transfer_cb_fn callback,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	transfer->type = LIBUSB_TRANSFER_TYPE_BULK_STREAM;
Libusb.h (x:\usb\libusb-1.0.19\libusb):	libusb_transfer_set_stream_id(transfer, stream_id);
Libusb.h (x:\usb\libusb-1.0.19\libusb): * Helper function to populate the required \ref libusb_transfer fields
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer, libusb_device_handle *dev_handle,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	libusb_transfer_cb_fn callback, void *user_data, unsigned int timeout)
Libusb.h (x:\usb\libusb-1.0.19\libusb):	transfer->type = LIBUSB_TRANSFER_TYPE_INTERRUPT;
Libusb.h (x:\usb\libusb-1.0.19\libusb): * Helper function to populate the required \ref libusb_transfer fields
Libusb.h (x:\usb\libusb-1.0.19\libusb):static inline void libusb_fill_iso_transfer(struct libusb_transfer *transfer,
Libusb.h (x:\usb\libusb-1.0.19\libusb):	libusb_transfer_cb_fn callback, void *user_data, unsigned int timeout)
Libusb.h (x:\usb\libusb-1.0.19\libusb):	transfer->type = LIBUSB_TRANSFER_TYPE_ISOCHRONOUS;
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer, unsigned int length)
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer, unsigned int packet)
Libusb.h (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer, unsigned int packet)
Libusbi.h (x:\usb\libusb-1.0.19\libusb):	(TRANSFER_CTX(USBI_TRANSFER_TO_LIBUSB_TRANSFER(transfer)))
Libusbi.h (x:\usb\libusb-1.0.19\libusb): * 2. struct libusb_transfer (which includes iso packets) [variable size]
Libusbi.h (x:\usb\libusb-1.0.19\libusb): * from a libusb_transfer, you can get the usbi_transfer by rewinding the
Libusbi.h (x:\usb\libusb-1.0.19\libusb):#define USBI_TRANSFER_TO_LIBUSB_TRANSFER(transfer) \
Libusbi.h (x:\usb\libusb-1.0.19\libusb):	((struct libusb_transfer *)(((unsigned char *)(transfer)) \
Libusbi.h (x:\usb\libusb-1.0.19\libusb):#define LIBUSB_TRANSFER_TO_USBI_TRANSFER(transfer) \
Libusbi.h (x:\usb\libusb-1.0.19\libusb):		+ sizeof(struct libusb_transfer)
Libusbi.h (x:\usb\libusb-1.0.19\libusb):	enum libusb_transfer_status status);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	enum libusb_transfer_status reap_status;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer =
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		if (LIBUSB_TRANSFER_TYPE_ISOCHRONOUS == transfer->type)
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer =
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	if (is_out && (transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET) &&
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	tpriv->reap_status = LIBUSB_TRANSFER_COMPLETED;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		case LIBUSB_TRANSFER_TYPE_BULK:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		    transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET)
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer =
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer =
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer =
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer =
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer =
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):			    tpriv->reap_status == LIBUSB_TRANSFER_COMPLETED)
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):				tpriv->reap_status = LIBUSB_TRANSFER_ERROR;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		tpriv->reap_status = LIBUSB_TRANSFER_NO_DEVICE;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		if (tpriv->reap_status == LIBUSB_TRANSFER_COMPLETED)
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):			tpriv->reap_status = LIBUSB_TRANSFER_STALL;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		if (tpriv->reap_status == LIBUSB_TRANSFER_COMPLETED)
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):			tpriv->reap_status = LIBUSB_TRANSFER_OVERFLOW;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	if (ERROR == tpriv->reap_action && LIBUSB_TRANSFER_COMPLETED == tpriv->reap_status)
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		tpriv->reap_status = LIBUSB_TRANSFER_ERROR;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer =
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	enum libusb_transfer_status status = LIBUSB_TRANSFER_COMPLETED;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		lib_desc->status = LIBUSB_TRANSFER_COMPLETED;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):			lib_desc->status = LIBUSB_TRANSFER_NO_DEVICE;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):			lib_desc->status = LIBUSB_TRANSFER_STALL;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):			lib_desc->status = LIBUSB_TRANSFER_OVERFLOW;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):			lib_desc->status = LIBUSB_TRANSFER_ERROR;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):			lib_desc->status = LIBUSB_TRANSFER_ERROR;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):					LIBUSB_TRANSFER_ERROR);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_NO_DEVICE;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_ERROR;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_COMPLETED;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_CANCELLED;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_NO_DEVICE;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_STALL;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_OVERFLOW;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_ERROR;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_ERROR;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer;
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Linux_usbfs.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):static int _access_endpoint(struct libusb_transfer *);
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer;
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):		    transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET) {
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):		    LIBUSB_TRANSFER_COMPLETED)))
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer;
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	if ((transfer->flags & LIBUSB_TRANSFER_SHORT_NOT_OK) == 0)
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):_access_endpoint(struct libusb_transfer *transfer)
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer;
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Netbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):		if ((transfer->flags & LIBUSB_TRANSFER_SHORT_NOT_OK) == 0)
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):static int _access_endpoint(struct libusb_transfer *);
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer;
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):		    transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET) {
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):		    LIBUSB_TRANSFER_COMPLETED)))
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer;
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	if ((transfer->flags & LIBUSB_TRANSFER_SHORT_NOT_OK) == 0)
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):_access_endpoint(struct libusb_transfer *transfer)
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer;
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Openbsd_usb.c (x:\usb\libusb-1.0.19\libusb\os):		if ((transfer->flags & LIBUSB_TRANSFER_SHORT_NOT_OK) == 0)
Sync.c (x:\usb\libusb-1.0.19\libusb):static void LIBUSB_CALL sync_transfer_cb(struct libusb_transfer *transfer)
Sync.c (x:\usb\libusb-1.0.19\libusb):static void sync_transfer_wait_for_completion(struct libusb_transfer *transfer)
Sync.c (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer = libusb_alloc_transfer(0);
Sync.c (x:\usb\libusb-1.0.19\libusb):	transfer->flags = LIBUSB_TRANSFER_FREE_BUFFER;
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_COMPLETED:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_TIMED_OUT:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_STALL:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_NO_DEVICE:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_OVERFLOW:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_ERROR:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_CANCELLED:
Sync.c (x:\usb\libusb-1.0.19\libusb):	struct libusb_transfer *transfer = libusb_alloc_transfer(0);
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_COMPLETED:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_TIMED_OUT:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_STALL:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_OVERFLOW:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_NO_DEVICE:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_ERROR:
Sync.c (x:\usb\libusb-1.0.19\libusb):	case LIBUSB_TRANSFER_CANCELLED:
Sync.c (x:\usb\libusb-1.0.19\libusb):		transferred, timeout, LIBUSB_TRANSFER_TYPE_BULK);
Sync.c (x:\usb\libusb-1.0.19\libusb):		transferred, timeout, LIBUSB_TRANSFER_TYPE_INTERRUPT);
Usb_ctrl.c:static void LIBUSB_CALL read_ts_cb(struct libusb_transfer *transfer)
Usb_ctrl.c:	struct libusb_transfer *transfer = libusb_alloc_transfer(0);
Usb_ctrl.c:	case LIBUSB_TRANSFER_COMPLETED:
Usb_ctrl.c:	case LIBUSB_TRANSFER_TIMED_OUT:
Usb_ctrl.c:	case LIBUSB_TRANSFER_STALL:
Usb_ctrl.c:	case LIBUSB_TRANSFER_OVERFLOW:
Usb_ctrl.c:	case LIBUSB_TRANSFER_NO_DEVICE:
Usb_ctrl.c:	case LIBUSB_TRANSFER_ERROR:
Usb_ctrl.c:	case LIBUSB_TRANSFER_CANCELLED:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	const BOOL control_transfer = transfer->type == LIBUSB_TRANSFER_TYPE_CONTROL;
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):		transfer->type != LIBUSB_TRANSFER_TYPE_CONTROL) {
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_COMPLETED;
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_CANCELLED;
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_STALL;
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_TIMED_OUT;
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):			status = LIBUSB_TRANSFER_TIMED_OUT;
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):			status = LIBUSB_TRANSFER_CANCELLED;
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_ERROR;
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	if (status == LIBUSB_TRANSFER_CANCELLED) {
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):		usbi_handle_transfer_completion(itransfer, (enum libusb_transfer_status)status);
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Wince_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):static int auto_claim(struct libusb_transfer *transfer, int *interface_number, int api_type)
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):		    transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET)
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_STALL;
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_TIMED_OUT;
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):		if (istatus != LIBUSB_TRANSFER_COMPLETED) {
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):			status = LIBUSB_TRANSFER_TIMED_OUT;
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):			status = LIBUSB_TRANSFER_CANCELLED;
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):		status = LIBUSB_TRANSFER_ERROR;
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	usbi_handle_transfer_completion(itransfer, (enum libusb_transfer_status)status);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_CONTROL:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	case LIBUSB_TRANSFER_TYPE_BULK_STREAM:
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	return LIBUSB_TRANSFER_COMPLETED;
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	int r = LIBUSB_TRANSFER_COMPLETED;
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):					r = LIBUSB_TRANSFER_OVERFLOW;
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
Windows_usb.c (x:\usb\libusb-1.0.19\libusb\os):	struct libusb_transfer *transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
